import asyncio
import os
import time
import logging
from collections import defaultdict
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import (
    InputMediaPhoto,
    InputMediaAudio,
    InputMediaVideo,
    InputMediaDocument,
    ReplyKeyboardMarkup,
    KeyboardButton
)
from dotenv import load_dotenv


#  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫

load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

if not TOKEN:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN –≤ .env —Ñ–∞–π–ª–µ")

logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")

bot = Bot(token=TOKEN)
dp = Dispatcher()


#  –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ

user_sessions = {}
media_cache = defaultdict(list)
group_timers = {}
warning_cache = {}
WARNING_COOLDOWN = 1.5
SESSION_LIFETIME = 120  # —Å–µ–∫—É–Ω–¥


#  –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞

start_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üÜò –ü–æ–º–æ—â—å"), KeyboardButton(text="‚Ü©Ô∏è –°–±—Ä–æ—Å–∏—Ç—å")],
    ],
    resize_keyboard=True
)


#  –ö–æ–º–∞–Ω–¥—ã

@dp.message(F.text.in_({"/start", "‚Ü©Ô∏è –°–±—Ä–æ—Å–∏—Ç—å"}))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    user_sessions.pop(user_id, None)
    
    gids_to_remove = []
    for gid, msgs in media_cache.items():
        if any(m.from_user.id == user_id for m in msgs):
            gids_to_remove.append(gid)
    
    for gid in gids_to_remove:
        media_cache.pop(gid, None)

    await message.answer(
        "–ù–∞–∑–Ω–∞—á–∏–º –Ω–æ–≤—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å!\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å 2‚Äì10 —Ñ–∞–π–ª–∞–º–∏ –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞",
        reply_markup=start_kb
    )


@dp.message(F.text.in_({"/help", "üÜò –ü–æ–º–æ—â—å"}))
async def cmd_help(message: types.Message):
    help_text = (
        "<b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>\n\n"
        "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É - –≤—Å—ë —Ç–æ, —á—Ç–æ –≤—ã –∑–∞–≥—Ä—É–∂–∞–µ—Ç–µ —Ñ–∞–π–ª–æ–º/–¥–æ–∫—É–º–µ–Ω—Ç–æ–º (2‚Äì10 –≤–ª–æ–∂–µ–Ω–∏–π <b>–æ–¥–∏–Ω–∞–∫–æ–≤–æ–≥–æ</b> —Ç–∏–ø–∞: —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –∞—É–¥–∏–æ, –¥–æ–∫—É–º–µ–Ω—Ç—ã).\n"
        "2. –ë–æ—Ç –ø–æ–∫–∞–∂–µ—Ç —Ç–µ–∫—É—â–∏–π –ø–æ—Ä—è–¥–æ–∫ —Ñ–∞–π–ª–æ–≤, –∞ –≤—ã –Ω–∞–∑–Ω–∞—á–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å.\n\n"
        "<b>–ü—Ä–∏–º–µ—Ä:</b> –µ—Å–ª–∏ —Ñ–∞–π–ª–æ–≤ 3, –≤–≤–µ–¥–∏—Ç–µ '3 2 1'.\n"
        "–ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Ñ–∞–π–ª—ã –≤ –Ω–æ–≤–æ–º –ø–æ—Ä—è–¥–∫–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –∫–æ—Ç–æ—Ä–æ–µ –æ—Å—Ç–∞—ë—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ—Å–ª–∞—Ç—å"
    )
    await message.answer(help_text, parse_mode="HTML")


#  –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø

async def process_media_group(group_id: str):
    messages = media_cache.pop(group_id, [])
    if not messages:
        return

    try:
        message = messages[0]
        user_id = message.from_user.id
        content_types = {m.content_type for m in messages}

        if len(content_types) > 1 or not (2 <= len(messages) <= 10):
            logging.warning(f"–ù–µ–≤–µ—Ä–Ω–∞—è –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞ –æ—Ç {user_id}")
            await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ 2-10 —Ñ–∞–π–ª–æ–≤ –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞")
            return
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã {group_id}: {e}")
        return

    content_type = messages[0].content_type

    if content_type == "photo":
        files = [m.photo[-1].file_id for m in messages]
    elif content_type == "video":
        files = [m.video.file_id for m in messages]
    elif content_type == "audio":
        files = [m.audio.file_id for m in messages]
    elif content_type == "document":
        files = [m.document.file_id for m in messages]
    else:
        return

    user_sessions[user_id] = {
        "files": files,
        "type": content_type,
        "expected_count": len(files),
        "timestamp": time.time(),
    }

    order_list = " ".join(str(i + 1) for i in range(len(files)))
    reverse_list = " ".join(str(i + 1) for i in reversed(range(len(files))))

    await message.answer(
        f"–ü–æ–ª—É—á–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(files)}\n\n"
        f"–¢–µ–∫—É—â–∏–π –ø–æ—Ä—è–¥–æ–∫: {order_list}\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: {reverse_list})"
    )

    logging.info(f"Media group processed from user {user_id}: {len(files)} files of type {content_type}")


@dp.message(F.media_group_id)
async def handle_media_group(message: types.Message):
    group_id = message.media_group_id
    media_cache[group_id].append(message)

    if group_id in group_timers:
        group_timers[group_id].cancel()

    group_timers[group_id] = asyncio.create_task(delayed_process(group_id, delay=0.7))


async def delayed_process(group_id: str, delay: float):
    try:
        await asyncio.sleep(delay)
        await process_media_group(group_id)
    except asyncio.CancelledError:
        pass
    finally:
        group_timers.pop(group_id, None)


#  –í–≤–æ–¥ –Ω–æ–≤–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

@dp.message(F.text.regexp(r"^(\d+\s*)+$"))
async def handle_order_input(message: types.Message):
    user_id = message.from_user.id
    session = user_sessions.get(user_id)

    if not session:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É")
        return

    if time.time() - session["timestamp"] > SESSION_LIFETIME:
        user_sessions.pop(user_id, None)
        await message.answer("–°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É")
        return

    files = session["files"]
    content_type = session["type"]
    expected_count = session["expected_count"]

    try:
        order_numbers = [int(x) for x in message.text.split()]
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª–∞–º–∏")
        return

    if len(order_numbers) != expected_count or len(set(order_numbers)) != expected_count:
        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ {expected_count} —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª")
        return

    if sorted(order_numbers) != list(range(1, expected_count + 1)):
        await message.answer(f"–ß–∏—Å–ª–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 1‚Äì{expected_count}")
        return

    ordered_files = [files[i - 1] for i in order_numbers]

    if content_type == "photo":
        media = [InputMediaPhoto(media=f) for f in ordered_files]
    elif content_type == "audio":
        media = [InputMediaAudio(media=f) for f in ordered_files]
    elif content_type == "video":
        media = [InputMediaVideo(media=f) for f in ordered_files]
    elif content_type == "document":
        media = [InputMediaDocument(media=f) for f in ordered_files]
    else:
        return

    try:
        await bot.send_media_group(chat_id=user_id, media=media)
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
    finally:
        
        user_sessions.pop(user_id, None)


#  –ê–Ω—Ç–∏—Å–ø–∞–º –∏ fallback

@dp.message()
async def fallback_handler(message: types.Message):
    user_id = message.from_user.id
    now = time.time()

    if now - warning_cache.get(user_id, 0) < WARNING_COOLDOWN:
        return

    warning_cache[user_id] = now
    await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help")


#  –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞

async def cleanup_cache():
    while True:
        now = time.time()
        expired = []
        for gid, msgs in media_cache.items():
            if msgs and hasattr(msgs[0], 'date') and msgs[0].date:
                if now - msgs[0].date.timestamp() > 30:
                    expired.append(gid)
        for gid in expired:
            media_cache.pop(gid, None)
        await asyncio.sleep(30)


#  main

async def main():
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω... (Ctrl + C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)")
    cleanup_task = asyncio.create_task(cleanup_cache())
    try:
        await dp.start_polling(bot)
    finally:
        cleanup_task.cancel()
        try:
            await cleanup_task
        except asyncio.CancelledError:
            pass

if __name__ == "__main__":
    asyncio.run(main())

